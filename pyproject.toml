[project]
# https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
name = "spherex-sphinx"
description = "Sphinx configurations and extensions for SPHEREx."
license = { file = "LICENSE" }
readme = "README.md"
keywords = ["spherex", "sphinx"]
# https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: POSIX",
    "Typing :: Typed",
]
requires-python = ">=3.10"
dependencies = [
    "Sphinx>=5",
    "pydata-sphinx-theme>=0.10.0,<0.13.0",
    "sphinx_design",
    "sphinx-autodoc-typehints",
    "sphinx-automodapi",
    "sphinx-copybutton",
    "myst-parser",
    "markdown-it-py[linkify]",
    "sphinxcontrib-mermaid",
    "tomli; python_version < \"3.11\"",
    "pydantic < 2.0.0",
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    # Testing
    "coverage[toml]",
    "pytest",
    "pre-commit",
    "mypy",
    "beautifulsoup4",
    "lxml",
    "types-docutils",
]

[project.urls]
# Homepage = "https://spherex-docs.caltech.ipac.edu/spherex-sphinx/"
Source = "https://github.com/SPHEREx/spherex-sphinx"

[build-system]
requires = ["setuptools>=61", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]

[tool.setuptools.packages.find]
# https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html
where = ["src"]
include = ["spherexsphinx*"]

[tool.coverage.run]
parallel = true
branch = true
source = ["spherexsphinx"]

[tool.coverage.paths]
source = ["src", ".tox/*/site-packages"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.black]
line-length = 79
target-version = ["py38"]
exclude = '''
/(
    \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | build
  | dist
)/
'''
# Use single-quoted strings so TOML treats the string like a Python r-string
#  Multi-line strings are implicitly treated by black as regular expressions

[tool.pydocstyle]
# Reference: http://www.pydocstyle.org/en/stable/error_codes.html
convention = "numpy"
add_select = [
    "D212", # Multi-line docstring summary should start at the first line
]
add-ignore = [
    "D105", # Missing docstring in magic method
    "D102", # Missing docstring in public method (needed for docstring inheritance)
    "D100", # Missing docstring in public module
    # Below are required to allow multi-line summaries.
    "D200", # One-line docstring should fit on one line with quotes
    "D205", # 1 blank line required between summary line and description
    "D400", # First line should end with a period
    # Properties shouldn't be written in imperative mode. This will be fixed
    # post 6.1.1, see https://github.com/PyCQA/pydocstyle/pull/546
    "D401",
]

[tool.isort]
profile = "black"
line_length = 79
known_first_party = ["spherexsphinx", "tests"]
skip = ["docs/conf.py"]

[tool.pytest.ini_options]
python_files = ["tests/*.py", "tests/*/*.py"]

[tool.mypy]
disallow_untyped_defs = true
disallow_incomplete_defs = true
ignore_missing_imports = true
strict_equality = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true
# plugins =
