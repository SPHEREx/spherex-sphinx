###############################
Creating a Python API reference
###############################

With sphinx-automodapi_, it is straightforward to build a Python API reference for even large projects.
This page describes the considerations for using sphinx-automodapi_.

Defining public modules
=======================

The first step to using sphinx-automodapi_ is to define the modules that make up the public API, and that therefore should be included in the API reference.
For each of these modules, it is often necessary to use a ``__all__`` module-level variable that lists the individual functions, classes, and variables that are part of the public API.
Especially for packages, where functions or classes are imported from internal modules, the ``__all__`` variable shows what reimported names are part of the public API.
An issue that frequently arises is a function or class being documented in two places because of imports â€” the ``__all__`` variable can help to avoid this by letting you specify the public namespace explicitly.

For example, consider the following module structure::

    mypackage/
        __init__.py
        module1.py
        module2.py

In this case, the ``__init__.py`` file might look like this::

        from .module1 import function1, Class1
        from .module2 import function2, Class2

        __all__ = ['function1', 'function2', 'Class1', 'Class2']

In ``module1``, there may be additional APIs that aren't hoisted to the package level but are still public.
In this case, the ``__all__`` variable can be used to specify the public API for the ``mypackage.module1`` namespace, and exclude APIs that are hoisted elsewhere::

    # module1.py
    __all__ = ['other_function']  # function1 and Class1 are already in __init__.py

    def function1():
        pass

    def other_function():
        pass

    class Class1:
        pass

Using the automodapi directive
==============================

In your Sphinx documentation project, you will typically have an ``api.rst`` file that serves as a table of contents for the API reference.
In that file, you will add an ``automodapi`` directive for each public module or package that you want to include in the API reference.
For example:

.. code-block:: rst

    .. automodapi:: mypackage

    .. automodapi:: mypackage.module1

See the `sphinx-automodapi`_ documentation for more information on the options that can be passed to the ``automodapi`` directive.

Build considerations
====================

These are some considerations for structuring your repository and build process when using sphinx-automodapi_:

- Ensure that the ``docs/api`` directory is included in a ``.gitignore`` file so that the generated API documentation is not checked into the repository.
  These API stub files are automatically generated by sphinx-automodapi_ at build time.
  Including them in version control can will trigger automodapi's caching and prevent new APIs from being discovered.

- Ensure that the Python package is installed in the same environment that the Sphinx build is running in.
  automodapi imports the packages to discover APIs.

- By default, automodapi generates a graphviz diagram of class inheritance in a module.
  GitHub Actions doesn't include graphviz by default, so you may need to install it in your build environment.
  See :ref:`getting-started-gh-actions`.
